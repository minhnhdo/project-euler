use num::bigint::BigUint;
use num::traits::{One, Pow};
use std::collections::HashMap;
use std::{cmp, iter};

pub fn problem001() -> u32 {
    (1..1000).filter(|n| n % 3 == 0 || n % 5 == 0).sum()
}

pub fn problem002() -> u64 {
    let mut a = 0;
    let mut b = 1;
    let fib_iter = iter::from_fn(move || {
        let ret = a + b;
        a = b;
        b = ret;
        Some(ret)
    });
    fib_iter
        .take_while(|n| n < &4_000_000)
        .filter(|n| n % 2 == 0)
        .sum()
}

fn primes_iter() -> impl Iterator<Item = u64> {
    iter::once(2).chain((3..).filter(|n| {
        n % 2 != 0
            && (3..=(*n as f64).sqrt() as u64)
                .step_by(2)
                .all(|i| n % i != 0)
    }))
}

// call with 600851475143
pub fn problem003(mut n: u64) -> u64 {
    if n <= 1 {
        return n;
    }
    for p in primes_iter() {
        while n % p == 0 {
            n /= p;
        }
        if n == 1 {
            return p;
        }
    }
    panic!();
}

pub fn problem004() -> u32 {
    (100..1000)
        .rev()
        .map(|n| (100..=n).rev().map(move |m| n * m))
        .flatten()
        .filter(|p| is_palindrome(&p.to_string()))
        .max()
        .unwrap()
}

fn is_palindrome(s: &str) -> bool {
    s.chars().zip(s.chars().rev()).all(|(c1, c2)| c1 == c2)
}

pub fn problem005() -> u64 {
    (2..=20)
        .fold(HashMap::new(), |mut acc, n| {
            prime_factors(n).iter().for_each(|(p, c)| {
                let e = acc.entry(*p).or_insert(*c);
                *e = cmp::max(*e, *c);
            });
            acc
        })
        .iter()
        .fold(1, |acc, (p, c)| acc * p.pow(*c))
}

fn prime_factors(mut n: u64) -> HashMap<u64, u32> {
    let mut ret = HashMap::new();
    if n <= 1 {
        return ret;
    }
    for p in primes_iter() {
        while n % p == 0 {
            n /= p;
            let count = ret.entry(p).or_insert(0);
            *count += 1;
        }
        if n == 1 {
            return ret;
        }
    }
    ret
}

pub fn problem006() -> u32 {
    let s = (1..=100).sum::<u32>();
    s * s - (1..=100).map(|n| n * n).sum::<u32>()
}

pub fn problem007() -> u64 {
    primes_iter().skip(10_000).take(1).max().unwrap()
}

pub fn problem008() -> u64 {
    let digits = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450";
    digits
        .split('0')
        .filter(|chunk| chunk.len() >= 13)
        .map(|chunk| {
            let first_product = chunk[..13]
                .chars()
                .map(|d| char_digit_to_u8(d) as u64)
                .product();
            chunk[13..]
                .chars()
                .map(char_digit_to_u8)
                .zip(chunk.chars().map(char_digit_to_u8))
                .scan(
                    first_product,
                    |product, (current_digit, digit_to_replace)| {
                        *product = *product / digit_to_replace as u64 * current_digit as u64;
                        Some(*product)
                    },
                )
                .max()
                .unwrap_or(first_product)
        })
        .max()
        .unwrap()
}

fn char_digit_to_u8(d: char) -> u8 {
    d as u8 - b'0'
}

pub fn problem009() -> u64 {
    for c in (1..=1000).rev() {
        for b in 1..(1000 - c) {
            let a = 1000 - b - c;
            if a * a + b * b == c * c {
                return a * b * c;
            }
        }
    }
    panic!();
}

pub fn problem010() -> u64 {
    primes_iter().take_while(|p| *p < 2_000_000).sum()
}

pub fn problem011() -> u64 {
    let data = [
        [
            08, 02, 22, 97, 38, 15, 00, 40, 00, 75, 04, 05, 07, 78, 52, 12, 50, 77, 91, 08,
        ],
        [
            49, 49, 99, 40, 17, 81, 18, 57, 60, 87, 17, 40, 98, 43, 69, 48, 04, 56, 62, 00,
        ],
        [
            81, 49, 31, 73, 55, 79, 14, 29, 93, 71, 40, 67, 53, 88, 30, 03, 49, 13, 36, 65,
        ],
        [
            52, 70, 95, 23, 04, 60, 11, 42, 69, 24, 68, 56, 01, 32, 56, 71, 37, 02, 36, 91,
        ],
        [
            22, 31, 16, 71, 51, 67, 63, 89, 41, 92, 36, 54, 22, 40, 40, 28, 66, 33, 13, 80,
        ],
        [
            24, 47, 32, 60, 99, 03, 45, 02, 44, 75, 33, 53, 78, 36, 84, 20, 35, 17, 12, 50,
        ],
        [
            32, 98, 81, 28, 64, 23, 67, 10, 26, 38, 40, 67, 59, 54, 70, 66, 18, 38, 64, 70,
        ],
        [
            67, 26, 20, 68, 02, 62, 12, 20, 95, 63, 94, 39, 63, 08, 40, 91, 66, 49, 94, 21,
        ],
        [
            24, 55, 58, 05, 66, 73, 99, 26, 97, 17, 78, 78, 96, 83, 14, 88, 34, 89, 63, 72,
        ],
        [
            21, 36, 23, 09, 75, 00, 76, 44, 20, 45, 35, 14, 00, 61, 33, 97, 34, 31, 33, 95,
        ],
        [
            78, 17, 53, 28, 22, 75, 31, 67, 15, 94, 03, 80, 04, 62, 16, 14, 09, 53, 56, 92,
        ],
        [
            16, 39, 05, 42, 96, 35, 31, 47, 55, 58, 88, 24, 00, 17, 54, 24, 36, 29, 85, 57,
        ],
        [
            86, 56, 00, 48, 35, 71, 89, 07, 05, 44, 44, 37, 44, 60, 21, 58, 51, 54, 17, 58,
        ],
        [
            19, 80, 81, 68, 05, 94, 47, 69, 28, 73, 92, 13, 86, 52, 17, 77, 04, 89, 55, 40,
        ],
        [
            04, 52, 08, 83, 97, 35, 99, 16, 07, 97, 57, 32, 16, 26, 26, 79, 33, 27, 98, 66,
        ],
        [
            88, 36, 68, 87, 57, 62, 20, 72, 03, 46, 33, 67, 46, 55, 12, 32, 63, 93, 53, 69,
        ],
        [
            04, 42, 16, 73, 38, 25, 39, 11, 24, 94, 72, 18, 08, 46, 29, 32, 40, 62, 76, 36,
        ],
        [
            20, 69, 36, 41, 72, 30, 23, 88, 34, 62, 99, 69, 82, 67, 59, 85, 74, 04, 36, 16,
        ],
        [
            20, 73, 35, 29, 78, 31, 90, 01, 74, 31, 49, 71, 48, 86, 81, 16, 23, 57, 05, 54,
        ],
        [
            01, 70, 54, 71, 83, 51, 54, 69, 16, 92, 33, 48, 61, 43, 52, 01, 89, 19, 67, 48,
        ],
    ];
    let mut ret = 0;
    for i in 4..data.len() {
        for j in 4..data[0].len() {
            ret = ret
                .max(data[i][j] * data[i][j - 1] * data[i][j - 2] * data[i][j - 3])
                .max(data[i][j] * data[i - 1][j] * data[i - 2][j] * data[i - 3][j])
                .max(data[i][j] * data[i - 1][j - 1] * data[i - 2][j - 2] * data[i - 3][j - 3]);
        }
        for j in 0..data[0].len() - 4 {
            ret =
                ret.max(data[i][j] * data[i - 1][j + 1] * data[i - 2][j + 2] * data[i - 3][j + 3]);
        }
    }
    ret
}

pub fn problem012() -> u64 {
    (1..)
        .scan(0, |sum, n| {
            *sum += n;
            Some(*sum)
        })
        .skip_while(|n| number_of_factors(*n) <= 500)
        .next()
        .unwrap()
}

fn number_of_factors(n: u64) -> u64 {
    prime_factors(n).values().map(|e| *e as u64 + 1).product()
}

pub fn problem013() -> u64 {
    [
        BigUint::parse_bytes(
            "37107287533902102798797998220837590246510135740250".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "46376937677490009712648124896970078050417018260538".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "74324986199524741059474233309513058123726617309629".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "91942213363574161572522430563301811072406154908250".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "23067588207539346171171980310421047513778063246676".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "89261670696623633820136378418383684178734361726757".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "28112879812849979408065481931592621691275889832738".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "44274228917432520321923589422876796487670272189318".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "47451445736001306439091167216856844588711603153276".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "70386486105843025439939619828917593665686757934951".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "62176457141856560629502157223196586755079324193331".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "64906352462741904929101432445813822663347944758178".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "92575867718337217661963751590579239728245598838407".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "58203565325359399008402633568948830189458628227828".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "80181199384826282014278194139940567587151170094390".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "35398664372827112653829987240784473053190104293586".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "86515506006295864861532075273371959191420517255829".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "71693888707715466499115593487603532921714970056938".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "54370070576826684624621495650076471787294438377604".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "53282654108756828443191190634694037855217779295145".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "36123272525000296071075082563815656710885258350721".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "45876576172410976447339110607218265236877223636045".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "17423706905851860660448207621209813287860733969412".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "81142660418086830619328460811191061556940512689692".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "51934325451728388641918047049293215058642563049483".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "62467221648435076201727918039944693004732956340691".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "15732444386908125794514089057706229429197107928209".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "55037687525678773091862540744969844508330393682126".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "18336384825330154686196124348767681297534375946515".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "80386287592878490201521685554828717201219257766954".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "78182833757993103614740356856449095527097864797581".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "16726320100436897842553539920931837441497806860984".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "48403098129077791799088218795327364475675590848030".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "87086987551392711854517078544161852424320693150332".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "59959406895756536782107074926966537676326235447210".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "69793950679652694742597709739166693763042633987085".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "41052684708299085211399427365734116182760315001271".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "65378607361501080857009149939512557028198746004375".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "35829035317434717326932123578154982629742552737307".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "94953759765105305946966067683156574377167401875275".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "88902802571733229619176668713819931811048770190271".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "25267680276078003013678680992525463401061632866526".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "36270218540497705585629946580636237993140746255962".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "24074486908231174977792365466257246923322810917141".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "91430288197103288597806669760892938638285025333403".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "34413065578016127815921815005561868836468420090470".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "23053081172816430487623791969842487255036638784583".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "11487696932154902810424020138335124462181441773470".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "63783299490636259666498587618221225225512486764533".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "67720186971698544312419572409913959008952310058822".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "95548255300263520781532296796249481641953868218774".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "76085327132285723110424803456124867697064507995236".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "37774242535411291684276865538926205024910326572967".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "23701913275725675285653248258265463092207058596522".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "29798860272258331913126375147341994889534765745501".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "18495701454879288984856827726077713721403798879715".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "38298203783031473527721580348144513491373226651381".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "34829543829199918180278916522431027392251122869539".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "40957953066405232632538044100059654939159879593635".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "29746152185502371307642255121183693803580388584903".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "41698116222072977186158236678424689157993532961922".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "62467957194401269043877107275048102390895523597457".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "23189706772547915061505504953922979530901129967519".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "86188088225875314529584099251203829009407770775672".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "11306739708304724483816533873502340845647058077308".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "82959174767140363198008187129011875491310547126581".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "97623331044818386269515456334926366572897563400500".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "42846280183517070527831839425882145521227251250327".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "55121603546981200581762165212827652751691296897789".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "32238195734329339946437501907836945765883352399886".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "75506164965184775180738168837861091527357929701337".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "62177842752192623401942399639168044983993173312731".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "32924185707147349566916674687634660915035914677504".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "99518671430235219628894890102423325116913619626622".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "73267460800591547471830798392868535206946944540724".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "76841822524674417161514036427982273348055556214818".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "97142617910342598647204516893989422179826088076852".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "87783646182799346313767754307809363333018982642090".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "10848802521674670883215120185883543223812876952786".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "71329612474782464538636993009049310363619763878039".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "62184073572399794223406235393808339651327408011116".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "66627891981488087797941876876144230030984490851411".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "60661826293682836764744779239180335110989069790714".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "85786944089552990653640447425576083659976645795096".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "66024396409905389607120198219976047599490197230297".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "64913982680032973156037120041377903785566085089252".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "16730939319872750275468906903707539413042652315011".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "94809377245048795150954100921645863754710598436791".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "78639167021187492431995700641917969777599028300699".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "15368713711936614952811305876380278410754449733078".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "40789923115535562561142322423255033685442488917353".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "44889911501440648020369068063960672322193204149535".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "41503128880339536053299340368006977710650566631954".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "81234880673210146739058568557934581403627822703280".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "82616570773948327592232845941706525094512325230608".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "22918802058777319719839450180888072429661980811197".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "77158542502016545090413245809786882778948721859617".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "72107838435069186155435662884062257473692284509516".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "20849603980134001723930671666823555245252804609722".as_bytes(),
            10,
        ),
        BigUint::parse_bytes(
            "53503534226472524250874054075591789781264330331690".as_bytes(),
            10,
        ),
    ]
    .iter()
    .flatten()
    .sum::<BigUint>()
    .to_str_radix(10)[..10]
        .parse()
        .unwrap()
}

pub fn problem014() -> u64 {
    (1..1_000_000)
        .max_by_key::<u64, _>(|n| collatz_iter(*n).map(|_| 1).sum())
        .unwrap()
}

fn collatz_iter(mut n: u64) -> impl Iterator<Item = u64> {
    iter::from_fn(move || {
        if n == 1 {
            return None;
        }
        let ret = n;
        if n % 2 == 0 {
            n = n / 2;
        } else {
            n = 3 * n + 1;
        }
        Some(ret)
    })
}

pub fn problem015() -> BigUint {
    k_combinations(&BigUint::from(40u32), &BigUint::from(20u32))
}

fn k_combinations(n: &BigUint, k: &BigUint) -> BigUint {
    num::range(n - k + BigUint::one(), n + BigUint::one()).product::<BigUint>()
        / num::range(BigUint::one(), k + BigUint::one()).product::<BigUint>()
}

pub fn problem016() -> u32 {
    BigUint::from(2u32)
        .pow(&BigUint::from(1000u32))
        .to_str_radix(10)
        .chars()
        .map(|d| char_digit_to_u8(d) as u32)
        .sum()
}
